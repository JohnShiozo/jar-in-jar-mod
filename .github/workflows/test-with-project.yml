name: Run with project

on:
  push: {}
  schedule:
    - cron:  '0 0 * * *'

env:
  RELEASER_CHANGER: gradle-properties

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build with Gradle
        run: ./gradlew publishToMavenLocal

      - uses: actions/upload-artifact@v2
        with:
          name: maven-repository
          path: ~/.m2/repository

  example:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        gradle:
          - "4.10.3"
          - "5.6.4"
          - "6.9.1" # updating
          - "7.2"   # updating
        project:
          - simplest-cpw
          - simplest-forge
          - simplest-cpw-kt
          - simplest-forge-kt
        exclude:
          - gradle: "4.0"
            project: simplest-cpw-kt
          - gradle: "4.0"
            project: simplest-forge-kt
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/download-artifact@v2
        with:
          name: maven-repository
          path: ~/.m2/repository
      - uses: anatawa12/something-releaser@v2

      - name: Setup Gradle Wrapper
        working-directory: test-projects/${{ matrix.project }}
        run: |
          touch empty
          ../../gradlew --build-file=empty wrapper --gradle-version=${{ matrix.gradle }}
          ./gradlew --build-file=empty wrapper
          rm empty
          echo "PLUGIN_VERSION=$(cd ../.. && get-version)" >> "$GITHUB_ENV"

      - name: Run Build Task
        working-directory: test-projects/${{ matrix.project }}
        run: ./gradlew build

  conclude:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - build
      - example
    steps:
      - name: Conclude Tests
        env: { NEEDS: "${{ toJSON(needs) }}" }
        run: |
          echo "$NEEDS" | jq -c '. | to_entries[] | [.key, .value.result]'
          echo "$NEEDS" | jq -e '. | all(.result == "success")' > /dev/null
